vagrant init <>centos
vagrant up
vagrant ssh
ctrl +d or exit
vagrant halt
vagrant destroy






vim: 
v/./d to delete all blank line
dG to delete all lines in vim
:%s/ *$// to remove space at end of line
g/^$/d  to delete empty lines

##############################

If you want to delete all lines that are empty or that contain only whitespace characters (spaces, tabs), use either of:
:g/^\s*$/d

#############################################

 to remove the whitespace: e is used ta ki error na aawe j koi match nahi milliya ta

:%s/\s\+$//e

######################################

The following deletes any leading whitespace at the beginning of each line.

:%s/^\s\+//e


    :%s to run :substitute over the range %, which is the entire buffer.
    \s t match all whitespace characters.
    \+ to repeat them 1 or more times.
    $ to anchor at the end of the line.
    The e flag to not give an error if there is no match (i.e. the file is already without trailing whitespace).
############

delete 7th line : 7d
to delete range: 7,20d
----------------------------------------

install vim, yum install vim\
ubuntu
sudo apt get update


_____________________

git : 

Git SSH cloning:
for this you need to create ssh keys: ssh-keygen -i rsa
copy the generated key content (file.pub)to github>setting/ssh/
copy ssh clone link and use: git clone <ssh link>

version control system
- on github create a repo, create a files.
- create a dir: /c/code
- on git bash : git clone <repo download link>
- do ls and see if the file comes which was on github
- create a new file in /c/code
- git status
- git add <file1>			[this will add ur file to statging area]
- git status
- git commmit -m (message) " "   	[this will move the file to your local version control system/database]
- git log
- git push (it will ask for user and password)
- now check github
- now in /c/.... make additional changes to your file1.
- git add
- git difftool HEAD (shows differnce between 2 files)
- git commmit -m "<>"
- git push (it will go upstream, upstream is github)
- on git hub >>see that file now, click on commits>> click on id to see the difference, red is line removed, green is add

to commit (use "git add" and/or "git commit -a")

>>>>>>>>>>>>>>>
- to undo the changes which are NOT commited : in cli, create a new file , edit existing one.
	git checkout --. (for undoing all the file undergone changes(whatever last changes they have will be undone))
Else file specific undo: git checkout --<filename>

- to undo changes which ARE commited: make a change >> add >> commit. now to undo that: git log (get the commit id)
 now git revert <commit id> >>> message will be prompeted> press q to quit
Over above line, we use revert , and it directly commit the change
if say i don't want to commit the chnage , i want I will do commit of my own then: git revert -n <commit id>
run git sttaus>>> now commit as per you message

- to reset: added pizza>added burger>remove burger>remove pizza
suppose if dont want all teh baove vhanges and want to go back to commit in which i have both pizza and burger.
#git reset --hard <commitid> {this commands take you to any prevouos version of file at time this command is distructive as well }
>>>>>>>>>>>>>>>>>>>

branch:
git branch (list all branches)
git branch thames (create a  new branch)
git checkout thames (make thames branch in use)


suppose you want to merge the thames branch into master branch.
- so git checkput master (use master branch)
- git merge thames(merge thames into master)
- git push (this pull update master branch to git hub to get the branch thames ver git hub do followinh:)
- git checkout thames
- git push thames
 to delete: git branch -d <name>
git checkout -b new_branch (create and checkut at same time)
>>>>>>>>>>>>>>>>>>
HEAD: 

git log
git show HEAD (this reefers to the last commit or recent commit, most of the time)
git difftool commit1 commit2
or git difftool HEAD~3 HEAD~2 (older one first)

How git manages thgis HEAD:
open /c/vag/code/jelly i this you have .git dir>open it>open HEAD file. oparameter keeps on changing here

Scenario where head dosesn't point to most recent commit that senario is called detach head:
commit 1
commit2
commit3
commit4	suppose you want to go to commit 2 and want to make it base for new commits. means you want to ignore commit1 then:
#git checkout commit2
so now in this: .git dir>open it>open HEAD file. usally it has branch name (HEAD) but now it will have commit ID.
To come out of HEAD dettach state: git checkout master
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in case you have python pycharm install , every time you run #git status, you see .idea file (whch is useless) and its comng again n agian its annoying.
so to fix this create .gitignore file in jelly, put  .idea in it

from above its clear in case we want any file to ignore put its entry into this file and add the changes. Git Tutorial 8 - .gitignore file

------------------------------------
Diff and merger using tool MELD: download meld from google>instal it>
now make change to A file in local , so local and github file has diffrence,
use #git difftool origin/master(means github)
we is installed MELD but not configure it, difftool is not very good looking tool, lets configure MELD.go to /c/users/ there you will find .gitconfig file vim that file you see it has our default address and name that we supply to our files(Author etc) in this file add:

[diff]
   tool = meld
REFER: Git Tutorial 7: Diff and Merge using meld video

only command #git difftool will show difference between your local commented file and uncomment file

BEST TOOL to USE INBUILT (VIMDIFF): # git difftool -t vimdiff (t --> tool)
-----------------------------------

Problems: you have file abc on github and on local.
- make chnages to file in github, add content
- make changes to file locally
- now it will give error when you push local file to github reason: github has advanced content, first you need too pull lucallay then make chnages then use push.

Resolution: merge both or solve the conflicts.
 git pull
it says merge conflict
cat <file> (its messy, HEAD in it refers local file )
to solve this you need merge tool: eg: MELD
make a entry in .gitconfig file : REFER Git Tutorial 7: Diff and Merge using meld for ENTRY
now run #git mergetool
using arroes keep/reject changes
make changes >>save>>add>commit>>push

----------------------

REFER: Github Tutorial : What is Pull Request?
this diiferent then what we use #git pull
This PULL is in GIthub if we have downloaded someones repo, we made changes and we send a reqyest to original owner of repo to ask him to pull ur code code looks good to the owner.

-----------------------------------------------

>>>>>>>>>>>>>>>>>>>>>>>>>>..
- I deleted file A in CLI then add>commit>push (it worked , file got deleted over github)
- I deleted file B from github , in cli i do git push, gives me error (so i need to pull the repo again and I see B file is deleted)
- rename file in CLI eg abc to def,this will say abc deleted , new file rename def then git pull , it will show up  to date no changes. now do git push you will see in github file with abc and def present (abc was alraedy there)

